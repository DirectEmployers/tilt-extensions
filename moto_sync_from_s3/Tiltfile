load("ext://uibutton", "cmd_button", "location")

EXTENSION_ROOT = os.getcwd()
PROJECT_ROOT = config.main_dir

REQUIRED_SECRETS = [
    "AWS_ACCOUNT_ID",
    "AWS_S3_ROLE_NAME",
    "AWS_SSO_WEB_START_URL",
]


def moto_sync_from_s3(
    bucket_name,
    object_prefix = "/",
    secrets_path = ".env",
    button_location = location.NAV,
):
    """Sync s3 moto bucket from real s3 bucket.

    Secrets should be prefixed with `S3SYNC_<source_bucket>__`, i.e.:
      - S3SYNC_MYBUCKETNAME__AWS_CLIENT_SESSION_NAME
      - S3SYNC_MYBUCKETNAME__AWS_ACCOUNT_ID (required)
      - S3SYNC_MYBUCKETNAME__AWS_S3_ROLE_NAME (required)
      - S3SYNC_MYBUCKETNAME__AWS_REGION
      - S3SYNC_MYBUCKETNAME__AWS_SSO_WEB_START_URL (required)
      - S3SYNC_MYBUCKETNAME__MOTO_SERVER_ENDPOINT
      - S3SYNC_MYBUCKETNAME__MOTO_ACCESS_KEY
      - S3SYNC_MYBUCKETNAME__MOTO_ACCESS_SECRET_KEY
    """
    button_env = _handle_secrets(secrets_path, bucket_name)
    button_name = "sync_s3_%s_%s" % (
        bucket_name.replace("-", "_"),
        object_prefix.lower().strip("/").replace("/", "_"),
    )
    button_text = "Sync s3://%s" % bucket_name
    _create_button(
        button_name,
        button_text,
        button_env,
        button_location,
        args = [bucket_name, object_prefix],
    )


def _create_button(name, text, env, button_location, args):
    cmd = [os.path.join(EXTENSION_ROOT, "scripts/bootstrap.sh")]
    cmd.extend(args)

    kwargs = {"location": location.NAV}
    if button_location not in ["nav", location.NAV]:
        kwargs.update(location=location.RESOURCE, resource=button_location)

    cmd_button(
        name = name,
        text = text,
        icon_name = "forward_to_inbox",
        env = env,
        argv = cmd,
        **kwargs
    )


def _secrets_example(env_prefix):
    return """Please provide the following secrets (Required = *):
    * {env_prefix}AWS_ACCOUNT_ID
      {env_prefix}AWS_CLIENT_SESSION_NAME
      {env_prefix}AWS_REGION
    * {env_prefix}AWS_S3_ROLE_NAME
    * {env_prefix}AWS_SSO_WEB_START_URL
      {env_prefix}MOTO_ACCESS_KEY
      {env_prefix}MOTO_ACCESS_SECRET_KEY
      {env_prefix}MOTO_SERVER_ENDPOINT
    """.format(env_prefix=env_prefix)


def _validate_secrets(secrets, env_prefix):
    if not secrets:
        fail("Secrets file is empty: %s" % _secrets_example(env_prefix))

    missing = []
    for required in REQUIRED_SECRETS:
        secret = env_prefix + required
        if secret not in secrets:
            missing.append(secret)

    if missing:
        fail("Required secrets are missing:\n%s" % "\n".join(["    * %s" % s for s in missing]))


def _handle_secrets(secrets_path, bucket_name):
    """Parse secrets by prefix, return list of environment variables for script."""
    env_prefix = "S3SYNC_%s__" % bucket_name.upper()

    secrets_path = os.path.join(PROJECT_ROOT, secrets_path)
    if not os.path.exists(secrets_path):
        fail("Could not load secrets: File does not exist: %s" % secrets_path)

    text_secrets = str(read_file(secrets_path, default = ""))
    _validate_secrets(text_secrets, env_prefix)

    secrets = []
    for line in text_secrets.splitlines():
        if line.startswith(env_prefix):
            secrets.append(line.replace(env_prefix, ""))

    return secrets
