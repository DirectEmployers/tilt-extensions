load("ext://uibutton", "cmd_button")
load("../devcore/Tiltfile", "tilt_port")

extension_root = os.getcwd()


def motoserver_up(init_script = "", **k8s_kwargs):
    """Deploy MotoServer using Docker and Kubernetes."""

    docker_build(
        "motoserver-persistence",
        context = os.path.join(extension_root, "src/"),
        dockerfile = os.path.join(extension_root, "Dockerfile"),
    )

    if not init_script:
         init_script = read_file(os.path.join(extension_root, "scripts/init.sh"))
    else:
        # If `init_script` is a file path, return its contents. Otherwise, treat it as a string.
        init_script = read_file(init_script, init_script)

    k8s_yaml([
        os.path.join(extension_root, "k8s/moto-statefulset.yaml"),
        os.path.join(extension_root, "k8s/moto-service.yaml"),
    ])
    k8s_yaml(init_script_configmap_yaml("motoserver-init-script", init_script))

    k8s_resource(
        "motoserver",
        port_forwards = ["motoserver:3000:3000"],
        objects = ["motoserver-init-script:configmap"],
        links = ["http://motoserver:3000/moto-api/"],
        **k8s_kwargs
    )

    add_ui_buttons()


def init_script_configmap_yaml(name, data):
    template = {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
            "name": name,
        },
        "data": {
            "init.sh": str(data)
        },
    }
    return encode_yaml(template)


def add_ui_buttons():
    """Add UI Buttons to toggle MotoServer and reset data."""
    port = tilt_port()

    toggle_script = os.path.join(extension_root, "scripts/toggle.sh")
    icon = "cloud" if "motoserver" in sys.argv or not sys.argv[2:] else "cloud_off"
    cmd_button(
        "motoserver:toggle",
        argv = ["sh", toggle_script, port],
        location = "nav",
        icon_name = icon,
        text = "Toggle MotoServer",
    )
