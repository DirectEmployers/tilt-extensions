"""Configuration for running Datadog Agent locally."""
load("ext://uibutton", "cmd_button", "location", "text_input")
load("ext://helm_resource", "helm_repo", "helm_resource")
load("ext://secret", "secret_create_generic")
load("../local_config/Tiltfile", "app_config_path")
load("../tilt_sessions/Tiltfile", "which_sessions", "current_port")

extension_path = os.getcwd()
datadog_config_path = app_config_path("directemployers/datadog")
datadog_settings = os.path.join(datadog_config_path, ".settings.env")
datadog_keys = os.path.join(datadog_config_path, ".keys.env")

icon_on = '''
<svg height="24px" viewBox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">
  <path d="M169.859-485Q132-485 106-511.141t-26-64Q80-613 106.141-639t64-26Q208-665 234-638.859t26 64Q260-537 233.859-511t-64 26Zm185-170Q317-655 291-681.141t-26-64Q265-783 291.141-809t64-26Q393-835 419-808.859t26 64Q445-707 418.859-681t-64 26Zm250 0Q567-655 541-681.141t-26-64Q515-783 541.141-809t64-26Q643-835 669-808.859t26 64Q695-707 668.859-681t-64 26Zm185 170Q752-485 726-511.141t-26-64Q700-613 726.141-639t64-26Q828-665 854-638.859t26 64Q880-537 853.859-511t-64 26ZM266-75q-42 0-69-31.526T170-181q0-42 25.5-74.5T250-318q22-22 41-46.5t36-50.5q29-44 65-82t88-38q52 0 88.5 38t65.5 83q17 26 35.5 50t40.5 46q29 30 54.5 62.5T790-181q0 42.948-27 74.474Q736-75 694-75q-54 0-107-9t-107-9q-54 0-107 9t-107 9Z"/>
</svg>
'''

icon_off = '''
<svg height="24px" viewBox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">
  <path d="M 4.33 11.344 C 3.702 11.344 3.173 11.124 2.742 10.684 C 2.31 10.244 2.095 9.705 2.095 9.068 C 2.095 8.43 2.311 7.893 2.745 7.455 C 3.179 7.017 3.709 6.799 4.337 6.799 C 4.965 6.799 5.495 7.019 5.926 7.459 C 6.358 7.899 6.573 8.438 6.573 9.075 C 6.573 9.712 6.356 10.25 5.923 10.687 C 5.489 11.125 4.958 11.344 4.33 11.344 Z M 7.348 3.162 C 7.782 2.725 8.313 2.506 8.941 2.506 C 9.569 2.506 10.098 2.726 10.53 3.166 C 10.961 3.606 11.176 4.145 11.176 4.782 C 11.176 5.419 10.96 5.957 10.526 6.395 C 10.382 6.54 10.227 6.661 10.062 6.758 L 8.978 5.662 C 9.128 5.661 9.161 5.652 9.288 5.6 C 9.424 5.544 9.437 5.535 9.561 5.41 C 9.685 5.285 9.692 5.274 9.747 5.137 C 9.803 4.998 9.808 4.973 9.808 4.782 C 9.808 4.59 9.803 4.563 9.747 4.423 C 9.691 4.284 9.683 4.271 9.559 4.145 C 9.436 4.02 9.425 4.012 9.29 3.956 C 9.153 3.899 9.129 3.895 8.941 3.895 C 8.752 3.895 8.725 3.9 8.587 3.957 C 8.45 4.013 8.438 4.021 8.313 4.147 C 8.189 4.272 8.182 4.283 8.127 4.42 C 8.074 4.55 8.067 4.58 8.066 4.741 L 6.981 3.644 C 7.078 3.472 7.201 3.311 7.348 3.162 Z M 15.154 7.051 C 14.526 7.051 13.996 6.831 13.565 6.391 C 13.134 5.951 12.918 5.412 12.918 4.775 C 12.918 4.137 13.135 3.6 13.569 3.162 C 14.002 2.725 14.533 2.506 15.161 2.506 C 15.789 2.506 16.319 2.726 16.75 3.166 C 17.181 3.606 17.397 4.145 17.397 4.782 C 17.397 5.419 17.18 5.957 16.746 6.395 C 16.313 6.832 15.782 7.051 15.154 7.051 Z M 19.757 11.344 C 19.129 11.344 18.599 11.124 18.168 10.684 C 17.737 10.244 17.521 9.705 17.521 9.068 C 17.521 8.43 17.738 7.893 18.172 7.455 C 18.605 7.017 19.136 6.799 19.764 6.799 C 20.392 6.799 20.922 7.019 21.353 7.459 C 21.784 7.899 22 8.438 22 9.075 C 22 9.712 21.783 10.25 21.35 10.687 C 20.916 11.125 20.385 11.344 19.757 11.344 Z M 6.723 21.698 C 6.026 21.698 5.454 21.432 5.006 20.901 C 4.558 20.371 4.334 19.744 4.334 19.021 C 4.334 18.314 4.545 17.687 4.968 17.139 C 5.391 16.592 5.843 16.066 6.324 15.561 C 6.689 15.191 7.029 14.799 7.345 14.387 C 7.66 13.975 7.958 13.549 8.24 13.112 C 8.719 12.374 9.256 11.687 9.85 11.049 L 2 3.061 L 3.045 2 L 17.266 16.433 L 19.76 18.961 C 19.76 18.962 19.76 18.963 19.76 18.964 L 21.681 20.914 L 20.612 22 L 19.282 20.647 C 19.223 20.734 19.159 20.819 19.089 20.901 C 18.641 21.432 18.069 21.698 17.372 21.698 C 16.476 21.698 15.589 21.622 14.71 21.47 C 13.83 21.319 12.943 21.243 12.047 21.243 C 11.152 21.243 10.264 21.319 9.385 21.47 C 8.506 21.622 7.618 21.698 6.723 21.698 Z M 9.383 13.876 C 9.085 14.337 8.758 14.804 8.426 15.238 C 8.084 15.685 7.693 16.134 7.301 16.534 C 6.847 17.01 6.446 17.478 6.045 17.997 C 5.902 18.181 5.855 18.269 5.787 18.47 C 5.719 18.672 5.702 18.778 5.702 19.021 C 5.702 19.267 5.718 19.364 5.788 19.56 C 5.858 19.754 5.899 19.825 6.045 19.998 C 6.178 20.155 6.193 20.168 6.34 20.235 C 6.487 20.303 6.512 20.309 6.723 20.309 C 7.561 20.309 8.333 20.243 9.156 20.101 C 10.092 19.94 11.094 19.854 12.047 19.854 C 13 19.854 14.003 19.94 14.939 20.101 C 15.761 20.243 16.534 20.309 17.372 20.309 C 17.582 20.309 17.608 20.303 17.755 20.235 C 17.901 20.168 17.917 20.155 18.049 19.998 C 18.177 19.847 18.225 19.773 18.281 19.628 L 10.817 12.033 C 10.276 12.616 9.82 13.199 9.383 13.876 Z M 4.684 9.893 C 4.821 9.837 4.833 9.828 4.958 9.703 C 5.082 9.578 5.089 9.567 5.144 9.43 C 5.2 9.291 5.205 9.266 5.205 9.075 C 5.205 8.883 5.2 8.856 5.144 8.716 C 5.088 8.577 5.08 8.564 4.956 8.438 C 4.833 8.313 4.822 8.305 4.687 8.249 C 4.55 8.192 4.525 8.187 4.337 8.187 C 4.149 8.187 4.122 8.192 3.983 8.249 C 3.847 8.306 3.834 8.314 3.71 8.44 C 3.586 8.565 3.579 8.576 3.524 8.713 C 3.468 8.852 3.463 8.877 3.463 9.068 C 3.463 9.259 3.468 9.287 3.524 9.427 C 3.58 9.565 3.588 9.578 3.712 9.704 C 3.835 9.83 3.846 9.838 3.981 9.894 C 4.118 9.951 4.142 9.955 4.33 9.955 C 4.519 9.955 4.546 9.95 4.684 9.893 Z M 15.508 5.6 C 15.644 5.544 15.657 5.535 15.781 5.41 C 15.905 5.285 15.913 5.274 15.968 5.137 C 16.024 4.998 16.028 4.973 16.028 4.782 C 16.028 4.59 16.023 4.563 15.967 4.423 C 15.912 4.284 15.903 4.271 15.78 4.145 C 15.657 4.02 15.646 4.012 15.511 3.956 C 15.374 3.899 15.349 3.895 15.161 3.895 C 14.972 3.895 14.945 3.9 14.807 3.957 C 14.671 4.013 14.658 4.021 14.534 4.147 C 14.41 4.272 14.402 4.283 14.347 4.42 C 14.291 4.559 14.287 4.584 14.287 4.775 C 14.287 4.966 14.292 4.994 14.348 5.134 C 14.403 5.273 14.412 5.285 14.535 5.412 C 14.658 5.537 14.669 5.545 14.804 5.601 C 14.941 5.658 14.966 5.662 15.154 5.662 C 15.343 5.662 15.37 5.657 15.508 5.6 Z M 20.111 9.893 C 20.248 9.837 20.26 9.828 20.385 9.703 C 20.508 9.578 20.516 9.567 20.571 9.43 C 20.627 9.291 20.632 9.266 20.632 9.075 C 20.632 8.883 20.627 8.856 20.57 8.716 C 20.515 8.577 20.506 8.564 20.383 8.438 C 20.26 8.313 20.249 8.305 20.114 8.249 C 19.977 8.192 19.952 8.187 19.764 8.187 C 19.575 8.187 19.548 8.192 19.41 8.249 C 19.274 8.306 19.261 8.314 19.137 8.44 C 19.013 8.565 19.006 8.576 18.95 8.713 C 18.894 8.852 18.89 8.877 18.89 9.068 C 18.89 9.259 18.895 9.287 18.951 9.427 C 19.006 9.565 19.015 9.578 19.138 9.704 C 19.262 9.83 19.272 9.838 19.407 9.894 C 19.544 9.951 19.569 9.955 19.757 9.955 C 19.946 9.955 19.973 9.95 20.111 9.893 Z" style="paint-order: fill; fill-rule: evenodd; stroke-width: 0px;"></path>
</svg>
'''

workload_name = "datadog-agent"
button_name = "de-remote:toggle-datadog-agent"


def datadog_up():
    port = current_port()
    operator_port = which_sessions("uiresource", "datadog-operator")

    if not operator_port or port == operator_port:
        datadog_operator()

        if os.path.exists(datadog_keys):
            datadog_keys_secret()
            helm_resources()
        else:
            warn(
                "Datadog keys are required to use datadog-agent: No keys found:",
                datadog_keys,
            )
    else:
        # Stub datadog-agent resource (for resource_deps compatibility)
        stub_resource()

    button()


def k8s_resouce_exists(resource_type, name):
    output = local([
        "kubectl",
        "get",
        resource_type,
        name,
        "--ignore-not-found",
        "--output=name",
    ])
    print("k8s resource found" if output else "k8s resource not found", output)
    return bool(output)


def dotenv(path, default = None):
    env = read_file(path)

    if not env:
        return default or {}

    return {k: v for k, v in [l.split("=") for l in str(env).split("\n") if l]}


def button():
    if os.path.exists(datadog_keys):
        keys = dotenv(datadog_keys)

    cmd_button(
        name = button_name,
        argv = ["echo", "boop"],
        text = "Datadog",
        location = location.NAV,
        icon_svg = icon_off,
        inputs = [
            text_input(
                "DATADOG_API_KEY",
                default = keys.get("api-key"),
                label = "Enter a Datadog API key (https://app.datadoghq.com/organization-settings/api-keys)",
            ),
            text_input(
                "DATADOG_APP_KEY",
                default = keys.get("app-key"),
                label = "Enter a Datadog application key (https://app.datadoghq.com/organization-settings/application-keys)",
            ),
        ],
    )


def datadog_operator():
    script_path = os.path.join(extension_path, "scripts/operator.py")
    local_resource(
        "datadog-operator",
        serve_cmd = ["python", script_path],
        labels = ["tilt"]
    )


def datadog_keys_secret():
    print("Datadog keys found:", datadog_keys)
    secret_create_generic(
        "datadog-keys",
        from_env_file = datadog_keys,
    )

    k8s_resource(
        new_name = "datadog-secret",
        objects = ["datadog-keys:secret"],
        labels = ["datadog"]
    )


def helm_resources():
    helm_repo(
        "helm-datadog-repo",
        "https://helm.datadoghq.com",
        labels = ["datadog", "helm"],
    )

    chart_values = os.path.join(extension_path, "values.yaml")
    helm_resource(
        workload_name,
        chart = "helm-datadog-repo/datadog",
        release_name = "datadog",
        flags = [
            "--values",
            chart_values,
        ],
        deps = [
            datadog_keys,
            chart_values,
        ],
        resource_deps = [
            "helm-datadog-repo",
            "datadog-secret",
        ],
        labels = ["datadog"],
    )

def stub_resource():
    local_resource(
        workload_name,
        labels = ["datadog"],
        serve_cmd = ["kubectl", "logs", "deployment", workload_name, "-f"]
    )
