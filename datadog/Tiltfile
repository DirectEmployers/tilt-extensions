"""Configuration for running Datadog Agent locally."""

load("ext://uibutton", "cmd_button", "location", "text_input")
load("ext://helm_resource", "helm_repo", "helm_resource")
load("ext://secret", "secret_create_generic")
load("../local_config/Tiltfile", "app_config_path")
load("../tilt_sessions/Tiltfile", "which_sessions", "current_port")


EXTENSION_PATH = os.getcwd()
DD_USER_CONFIG_PATH = app_config_path("directemployers/datadog")
DD_KEY_FILE = os.path.join(DD_USER_CONFIG_PATH, ".keys.env")

WORKLOAD_NAME = "datadog-agent"
BUTTON_NAME = "de-remote:toggle-datadog-agent"

DEFAULT_AGENT_TAG = "7"


# Tell Tilt not to watch/reload when configuration files update.
watch_settings(DD_USER_CONFIG_PATH)


def datadog_up(agent_version = DEFAULT_AGENT_TAG):
    """Main function for this Tilt extension.

    Creates necessary resources for the Datadog Agent to run and be shared across
    multiple Tilt sessions.

    Args:
      agent_version: Set a specific version tag for Datadog Agent images.
    """
    port = current_port()
    operator_port = which_sessions("uiresource", "datadog-operator")

    _datadog_button()

    if not operator_port or port == operator_port:
        _datadog_operator()

        if os.path.exists(DD_KEY_FILE):
            _datadog_keys_secret()
        else:
            warn(
                "Warning: Datadog API and App keys are required to use the Datadog "
                + "Cluster Agent, you can set them from the Datadog button dropdown.\n"
                + " • Get API Key: https://app.datadoghq.com/organization-settings/api-keys\n"
                + " • Get Application Key: https://app.datadoghq.com/organization-settings/application-keys"
            )

        _helm_resources(agent_version)
    else:
        # Stub datadog-agent resource (for resource_deps compatibility)
        _stub_resource()


def _dotenv(path, default = {}):
    """Read a local envfile/dotfile into a dict, or returns `default`."""
    env = read_file(path, "")

    if not env:
        return default

    return {k: v for k, v in [l.split("=") for l in str(env).split("\n") if l]}


def _datadog_operator():
    """Create datadog-operator resource, a state-management background process.

    Manages UIButton presses and maintains state between Tilt sessions.
    """
    scripts_root = os.path.join(EXTENSION_PATH, "scripts")
    script = os.path.join(scripts_root, "datadog.py")

    local_resource(
        "datadog-operator",
        serve_cmd = ["python", script, "serve"],
        deps = [scripts_root],
        labels = ["tilt"],
    )


def _datadog_button():
    """Create Tilt UIButton resource to toggle Datadog Agent and take credentials.

    The button runs scripts and sends signals to the datadog-operator to ensure that
    the Datadog Agent assumes the correct state across Tilt sessions.
    """
    keys = _dotenv(DD_KEY_FILE)
    script = os.path.join(EXTENSION_PATH, "scripts/datadog.py")
    icon_off = read_file(os.path.join(EXTENSION_PATH, "assets/datadog-disabled.svg"))

    cmd_button(
        name = BUTTON_NAME,
        argv = ["python", script, "remote", DD_KEY_FILE],
        text = "Enable Datadog",
        location = location.NAV,
        icon_svg = icon_off,
        inputs = [
            text_input(
                "DATADOG_API_KEY",
                default = keys.get("api-key", ""),
                label = "Enter a Datadog API key (https://app.datadoghq.com/organization-settings/api-keys)",
            ),
            text_input(
                "DATADOG_APP_KEY",
                default = keys.get("app-key", ""),
                label = "Enter a Datadog application key (https://app.datadoghq.com/organization-settings/application-keys)",
            ),
            v1alpha1.ui_input_spec(
                "DE_TILT_DATADOG_NAV_BTN",
                label = "button_status",
                hidden = v1alpha1.ui_hidden_input_spec("Disabled"),
            )
        ],
    )


def _datadog_keys_secret():
    """Create Kubernetes secret to store Datadog credentials.

    If no keys are found via local dotfile, they will be generated from provided
    values on Tilt UI button press.
    """
    print("Datadog keys found:", DD_KEY_FILE)

    secret_create_generic(
        "datadog-keys",
        from_env_file = DD_KEY_FILE,
    )

    k8s_resource(
        new_name = "datadog-secret",
        objects = ["datadog-keys:secret"],
        labels = ["datadog"]
    )


def _helm_resources(agent_version = DEFAULT_AGENT_TAG):
    """Create Tilt resources required to install Datadog Agent from Helm charts.

    Args:
      agent_version: Sets a specific image tag version for the Datadog Agent.
    """
    release_name = "datadog-agent"
    helm_repo(
        "helm-datadog-repo",
        "https://helm.datadoghq.com",
        labels = ["datadog"],
    )

    chart_values = os.path.join(EXTENSION_PATH, "values.yaml")
    flags = ["--values", chart_values]

    flags.extend(["--set", "agents.image.tag=%s" % agent_version])
    flags.extend(["--set", "clusterAgent.image.tag=%s" % agent_version])
    flags.extend(["--set", "clusterChecksRunner.image.tag=%s" % agent_version])

    helm_resource(
        WORKLOAD_NAME,
        chart = "helm-datadog-repo/datadog",
        release_name = release_name,
        flags = flags,
        deps = [
            DD_KEY_FILE,
            chart_values,
        ],
        resource_deps = [
            "helm-datadog-repo",
            "datadog-secret",
        ],
        labels = ["datadog"],
        auto_init = False,
    )


def _stub_resource():
    """Create Tilt resource that acts as a stub for the real datadog-agent resource.

    We only want one datadog-agent running, so if we start more Tilt sessions we'll
    deploy this resource stub as a stand-in to fulfill `resource_deps` references on
    Tilt resources which rely on it.

    Tails logs from the Kubernetes `datadog-cluster-agent` deployment.
    """
    local_resource(
        WORKLOAD_NAME,
        serve_cmd = [
            "kubectl",
            "logs",
            "deployment/datadog-cluster-agent",
            "--follow=true",
            "--ignore-errors=false",
            "--pod-running-timeout=5m",
        ],
        labels = ["datadog"],
        auto_init = False,
    )
