TARFETCH_SCRIPT = os.path.join(os.getcwd(), "scripts", "tarfetch.sh")
DEFAULT_EXCLUDES = [
    ".git",
    ".gitignore",
    ".dockerignore",
    "Dockerfile",
    ".tiltignore",
    "Tiltfile",
    "tilt_modules",
]

def tarfetch(
    tilt_resource,
    k8s_resource,
    src_dir,
    target_dir = ".",
    namespace = "default",
    container = "",
    ignore = None,
    keep_newer = True,
    verbose = False,
    labels = None,
):
    """
    Create a sync button on the specified Tilt resource, which will pull files from
    a Kubernetes container onto the local filesystem.

    :param tilt_resource: name of Tilt resource to bind button to.
    :param k8s_resource: a Kubernetes object identifier (e.g. deploy/my-deploy,
        job/my-job, or a pod ID) that Tilt can use to select a pod. As per the
        behavior of `kubectl exec`, we will act on the first pod of the specified
        object, using the first container by default.
    :param src_dir: directory IN THE KUBERNETES CONTAINER to sync from. Any
        paths specified, if relative, should be relative to this dir.
    :param target_dir: directory ON THE LOCAL FS to sync to. Defaults to '.'
    :param namespace: namespace of the desired k8s_object, if not `default`.
    :param container: name of the container to sync from (by default,
        the first container)
    :param ignore: patterns to ignore when syncing, see
        `tar --exclude` documentation for details on supported patterns.
    :param keep_newer: prevents files overwrites when the destination
        file is newer. Default is true.
    :param verbose: if true, shows tar extract activity.
    :param labels: deprecated argument from when tarfetch was a resource rather than
        a UI button.
    """

    # Deprecation handling
    if tilt_resource.startswith("sync") or tilt_resource.startswith("tarfetch"):
        warn(
            "[tarfetch] WARNING: The leading positional argument 'tilt_resource' may "
            + "have changed in purpose since it was configured for this project. "
            + "Please update it to reference the Tilt UI resource to bind the sync "
            + "button to."
        )
    if labels:
        warn("[tarfetch] WARNING: The 'labels' argument has been deprecated and may be removed.")

    # Verify inputs
    if not src_dir.endswith("/"):
        fail("[tarfetch] src_dir must be a directory and have a trailing slash")

    to_exclude = ignore
    if not ignore:
        to_exclude = []

    # Apply defaults
    to_exclude = DEFAULT_EXCLUDES + to_exclude

    excludes = " ".join(["--exclude={}".format(ex) for ex in to_exclude])

    # bundle container flag with k8s object specifier
    if container:
        k8s_resource = "{obj} -c {container}".format(obj = k8s_resource, container = container)

    destination_path = os.path.realpath(target_dir)
    if not os.path.exists(destination_path):
        print("[tarfetch] Preparing destination path for reverse sync:")
        local(
            ["mkdir", "-p", destination_path],
            command_bat = "mkdir {} || ver>nul".format(destination_path),
            quiet = True,
        )


    btn_name = "btn-tarfetch-" + tilt_resource
    v1alpha1.ui_button(
        name = btn_name,
        location = {
            "component_type": "Resource",
            "component_id": tilt_resource,
        },
        text = "Sync from Container",
        icon_name = "cloud_sync",
        annotations = {"tilt.dev/resource": tilt_resource},
    )

    env = {
        "namespace": namespace,
        "resource_name": k8s_resource,
        "exclude": excludes,
        "src_dir": src_dir,
        "target_dir": target_dir,
        "keep_newer": str(bool(keep_newer)).lower(),
        "verbose": str(bool(verbose)).lower(),
    }

    v1alpha1.cmd(
        name = "cmd-tarfetch-" + tilt_resource,
        annotations = {
            "tilt.dev/resource": tilt_resource,
            "tilt.dev/log-span-id": "cmd:tarfetch:" + tilt_resource,
        },
        args = [TARFETCH_SCRIPT],
        env = ["TARFETCH_%s=%s" % (k.upper(), v) for k, v in env.items()],
        start_on = v1alpha1.start_on_spec(
            ui_buttons = [btn_name],
        ),
    )
