#!/bin/bash

cd "$(dirname "$0")" || exit

OUTPUT_FILE="test-requirements.txt"
BUTTON_NAME="pip-compile:python-app"
CMD_NAME="btn-${BUTTON_NAME}"

set -uo pipefail

echo -n "Starting Tilt... "
tilt up > /dev/null &
TILT_PID=$!
echo "process #${TILT_PID}"

# Wait for pip-compile button to become ready.
echo
echo "Waiting for pip-compile resources to become ready..."

sleep 1
timeout 10 bash -c "until tilt get uibutton \"${BUTTON_NAME}\"; do sleep 1; done" > /dev/null
echo "  uibutton/${BUTTON_NAME}: ready"
timeout 10 bash -c "until tilt get cmd \"${CMD_NAME}\"; do sleep 1; done" > /dev/null
echo "  cmd/${CMD_NAME}: ready"

# Ensure host output file exists.
touch $OUTPUT_FILE

echo
echo "Running tests..."
TOTAL_TESTS=0
FAILURES=0

# Trigger the `pip-compile` button.
# Currently, kubectl doesn't support subresource APIs.
# Follow this KEP:
# https://github.com/kubernetes/enhancements/issues/2590
# For now, we can handle it with curl.
TIME=$(date '+%FT%T.000000Z')
YAML=$(tilt get uibutton "${BUTTON_NAME}" -o yaml)
NEW_YAML=${YAML//lastClickedAt: null/lastClickedAt: $TIME}
curl --silent \
  -X PUT \
  -H "Content-Type: application/yaml" \
  -d "$NEW_YAML" \
  "http://localhost:10350/proxy/apis/tilt.dev/v1alpha1/uibuttons/${BUTTON_NAME}/status" \
  > /dev/null

# Test: pip-compile button activated:
TOTAL_TESTS=$((TOTAL_TESTS+1))
echo -n "  button activated: "
tilt get uibutton "${BUTTON_NAME}" -o yaml | grep -q "${NEW_YAML}"
if [ $? ]; then
  echo "passed"
else
  echo "failed"
  FAILURES=$((FAILURES+1))
fi

# Test: pip-compile command started:
TOTAL_TESTS=$((TOTAL_TESTS+1))
echo -n "  command started: "
timeout 10 tilt logs -f | grep -q "Running cmd: docker run"
if [ $? ]; then
  echo "passed"
else
  echo "failed"
  FAILURES=$((FAILURES+1))
fi

# Test: pip-compile command completed:
TOTAL_TESTS=$((TOTAL_TESTS+1))
echo -n "  command completed: "
timeout 10 tilt logs -f | grep -q "This file is autogenerated by pip-compile"
timeout 5 tilt logs -f | grep -q "All pip requirements have been compiled!"
if [ $? ]; then
  echo "passed"
else
  echo "failed"
  FAILURES=$((FAILURES+1))
fi

# Test: requirements compiled:
TOTAL_TESTS=$((TOTAL_TESTS+1))
echo -n "  requirements compiled: "
if [ -s $OUTPUT_FILE ]; then
  echo "passed"
  rm $OUTPUT_FILE
else
  echo "failed"
  FAILURES=$((FAILURES+1))
fi

# Report results.
echo
echo "Tests finished. ${TOTAL_TESTS} tests run, ${FAILURES} failed."
echo -n "Finished: "
test $FAILURES && echo "SUCCESS" || echo "FAILURE"

# Stop Tilt session.
kill -INT $TILT_PID
tilt down > /dev/null &
exit $FAILURES
