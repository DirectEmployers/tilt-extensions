"""Maintain a Kubernetes ConfigMap with active Tilt Sessions."""

SCRIPTS = os.path.join(os.getcwd(), "scripts")
CONFIGMAP_NAME = "tilt-active-sessions"


def cmd(command, quiet = True, command_bat = "", echo_off = True, env = {}, dir = "", stdin = ""):
    output = local(command, quiet, command_bat, echo_off, env, dir, stdin)
    return str(output).strip()


def current_port():
    return cmd(["sh", "-c", "echo $TILT_PORT"])


def get_session(port = None):
    if not port:
        port = current_port()

    output = cmd(
        [
            "tilt",
            "get",
            "sessions",
            "Tiltfile",
            "--ignore-not-found",
            "--port=%s" % port,
            "--output=yaml",
        ]
    )

    return decode_yaml(output) if output else {}


def is_active(port = None):
    script = os.path.join(SCRIPTS, "verify-active.sh")
    return bool(cmd([script, port]))


def configmap_exists():
    output = cmd(
        [
            "kubectl",
            "get",
            "configmap",
            CONFIGMAP_NAME,
            "--ignore-not-found",
            "--output",
            "name"
        ]
    )
    return output == CONFIGMAP_NAME


def get_session_states():
    existing_yaml = cmd(
        [
            "kubectl",
            "get",
            "configmap",
            CONFIGMAP_NAME,
            "--ignore-not-found",
            "--output",
            "yaml"
        ]
    )
    configmap = decode_yaml(existing_yaml) if existing_yaml else {}
    return configmap.get("data", {})


def refresh_sessions(sessions):
    active = {}
    for port, created_at in sessions.items():
        if is_active(port):
            patch_configmap("add", port, created_at)
        else:
            patch_configmap("remove", port)
    return active


def patch_configmap(op, port, value = ""):
    if op not in ["add", "remove"]:
        fail("Failed to patch ConfigMap: `op` argument must be one of (add, remove)")

    return local(
        [
            "kubectl",
            "patch",
            "configmap",
            CONFIGMAP_NAME,
            "--type=json",
            "--patch",
            '[{"op": "%s", "path": "/data/%s", "value": %s}]' % (op, port, value),
        ],
        quiet=True,
        echo_off=True,
    )


def create_configmap():
    configmap = {
        "apiVersion": "v1",
        "kind": "ConfigMap",
        "metadata": {
            "name": CONFIGMAP_NAME,
            "annotations": {
                "tilt.dev/down-policy": "keep",
            },
        },
        "data": {},
    }
    cmd(["kubectl", "apply", "-f", "-"], stdin = encode_yaml(configmap))


def active_sessions():
    sessions = get_session_states()

    if not configmap_exists():
        # Create the ConfigMap if it doesn't exist
        create_configmap()

    if config.tilt_subcommand == "up":
        # Add current session on `tilt up`
        session = get_session()
        sessions.update({current_port(): session["metadata"]["creationTimestamp"]})

    # Refresh ConfigMap with currently known active sessions
    sessions = refresh_sessions(sessions)

    print("Active Tilt Sessions:")
    for p, c in sessions.items():
        print("-", "tiltSessionPort:", p)
        print(" ", "creationTimestamp:", c)

    return sessions.keys()
